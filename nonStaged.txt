Bu dosyaya bir seyler ekleyecegim ve stage'e gonderilmemis degisiklikleri geri almayi deneyecegim

Oncelikle git restore dosyaAdi ve git restore . komutlarini kullanmayi deneyecegim

Dosyanin simdiye kadarki hali stage'e gonderildi, eger dosyanda degisiklik yaptiktan sonra save etmezsen bu degisiklik git tarafindan algilanmaz ve git status komutu her yeri yesil gosterir. Her degisikliginden sonra save edersen bu degisikligin de stage'e gonderilmesi gerektigini sana soyleyecektir. Simdi asagiya bir satir ekleyecek ve sonra onu geri almayi deneyecegim.
Hazirsak basliyoruz .. 

Bu paragrafin aynisindan bir tane daha ekleyecegim ve silinip silinmedigini gorecegiz 
Ekledigim satir burasi ve her yeri karman corman yaptim aralara ekledim simdi nasil duzeltecegimi bilemiyorum, galiba yandim 
nööö working space den geri alma komutunu kullanmaliyim :)

Ta daaaa ikinci paragraf gitti 

Simdi ayni islemi checkout ile deneyelim. Cunku aradaki farki gercekten bilmiyorum. Yukaridaki paragrafin aynisini asagiya yapistiracak ve checkout ile geri almayi deneyecegim. 

Birkac deneme sonrasi edindigim bilgileri not ediyorum:
Checkout komutu bizi istedigimiz bir yere goturur. tipki versiyonlar arasinda gecis yaptirdigi gibi. Nereye gitmek istedigimizi soyleriz ve gideriz.
Degisiklikleri geri almmak icin kullandigimizda ise stage e atılmamis veya en kotu ihtimalle commit haline getirilmemis degisiklikleri geri alirken kullanabildigimize dikkat edelim. Burasi onemli cunku isin puf noktasi burasi. Checkout aslinda bizi kayitli olan son versiyona goturuyor, calisma alanimizi veya stage'i son kayit ile esliyor. 

restore ise geri yukleme demektir. belirttigimiz repo head ile eslenir. Bu da aslinda kayitli olan son versiyonla eslemek demektir. Bundan dolayi checkout ile ayni isi yapmis olurlar 

ws <-- s  		: git restore dosyaAdi
s  <-- lr 		: git restore --staged dosyaAdi (burada ws degismez)
ws <-- s <-- lr : git restore --staged --worktree (hem stage hem de ws lr ile ayni hale getirildi)

