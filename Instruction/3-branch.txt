git branch : branchlere bakar

git branch -a : Olusturulan tum branch'leri listeler. Remote+Local branchlerin tumunu
			    gosterir

git branch tugba1 : tugba1 adinda yeni branch olusturur.Bu komut hangi branch icinde
					calistirildiysa, o branch'in copy'si yeni branch'te olusur

git checkout tugba1 : tugba1 branchine gecis yapar

git checkout -b tugba1 : tugba1 adinda yeni bir barnch olusturur ve ona gecis yapar
						 head artik dogrudan bu branch'te

git branch -m tugba : Bu komut hangi branch icinde calistirilirsa o branch'in adini
					  degistirip tugba yapar. "tugba" yazilmaz direk tugba yazilir

git branch -d tugba : Belirtilen branch silinir. (Bu komutun calismasi icin barnch
					  master ile birlestirilmis olmali)
					  Silinen branch uzerinden olusturulan yeni branch'lerdeki dosyalara bir sey olmaz. Cunku zaten copy'si alinarak olusturulmustu.

git branch -D tugba : Silmeye zorla. Branch master ile birlestirilmemis olsa bile 
					  silinir. 

git merge tugba : tugba brnch'i komutu calistirdigimiz branch'e birlestirilir. 
				  Hangi branch icine birlesitirilmesini istiyorsak komutu orada calistirmaliyiz.

git merge abort :  Merge islemini geri alir.
				   Merge ederken conflict ortaya cikti veya baska bir sebeple merge islemini geri almak istiyorsak kullaniriz. Conflict icin kullanildiysa kisa vadede hatadan kacma saglar ancak yine de merge etmeye olan ihtiyac devam etmektedir. 

git show branchName : Verilen branch'in commitlerini ve commit detaylarini gosterir.

----------------------------------------------------------------------------------------
NOTES
----------------------------------------------------------------------------------------

NOTE1: Master branch ilk commit sonrasi olusur. Commit yapilmadan b1 branch'i olusturursak master'in adi b1 ile degisir.

NOTE2: Master'i commit ettik. b1'i olusturduk. b1; master'in sahip oldugu tum commitleri icerir.

NOTE3: Branchlerdeki dosyalarda yaptigimiz degisiklikleri commit etmezsek kaydolmaz, diger branchlere gecemeyiz

NOTE4: b1 branch'inde dosya olusturdum. git add yaptim. commit etmeden b2'ye gectim. O dosya b2'de gorunur. b2'de commit edersem o dosya b2'de olur b1'de olmaz. 

NOTE5: b2'de dosya sildim. commit etmedim. b1'e gectiÃ¶m. b2'deki degisiklik geri gelir. Yani silinme islemi gerceklesmez.

----------------------------------------------------------------------------------------
VAKA
----------------------------------------------------------------------------------------

Master 		 B1
m1(abc) 	m1(bb)
m2 			b1
--> b1'de iken git merge master dersem m1'de conflict cikar. m2 m1'e tasinmaz
--> master'da iken git merge b1 dersem m2 silinir b1 eklenir. m1'de ayni satirlarda 
    degisiklik olsa bile conflict cikmaz 

----------------------------------------------------------------------------------------
SCENARIOS
----------------------------------------------------------------------------------------

scenario:1
projemi local masterdan local tugba1 branch e tasidim
branch i github a attim
githubda branc vasitasiyla master branch olusturdum
commitleri localdeki mastera pull yaparak esitledim


scenario:2
local master branchteki projemi git add+commit+push ile githuba attim
sonra localde master;i tugba1 branchini olusturarak kopyaladim
kendi kodlarimi artik tugbadan baska yerde yazmak yok
tugba1'deki degisikliklerimi git add+commit+push diyip remoteda tugba1 branchi olusturup onun icine pushladim

remotedaki tugba1'deki son degisikler remotedaki masterda yok
pull request + merge diyerek remotedaki mastera guncelledim
remote masterdan local mastera pull ettim


scnerio3:
sen takima dahil olursun githubta coktaan proje vardir
githubtaki remote master'i localine clone larsin
localindeki master branchinde run edersin calisiyor mu diye bakarsin calismiyorsa arkadaslarinla konus
calisiyorsa local master'i local tugba1'e kopyala

kendi kodlarini tugba1'de yaz git add+commit+push diyip remote tugba1'e at
remote tugba1'den remote master'a pull request + merge yap 
remote master -> local mastera git pull yap


